name: "Rebuild Armbian"

on:
  workflow_dispatch:
    inputs:
      armbian_runner_clean:
        description: "Make space on GitHub runners"
        required: false
      armbian_pgp_key:
        description: "Armbian PGP key"
        required: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Free GitHub Runner
        if: ${{ github.event.inputs.armbian_runner_clean != '' }}
        uses: descriptinc/free-disk-space@main
        with:
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Import GPG key
        if: ${{ github.event.inputs.armbian_pgp_key != '' }}
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ github.event.inputs.armbian_pgp_key }}
          passphrase: ${{ secrets.ARM_PGP_PASSWORD }}

      - name: Checkout Armbian OS
        uses: actions/checkout@v4
        with:
          repository: armbian/os
          path: os

      - name: Checkout Armbian build framework
        uses: actions/checkout@v4
        with:
          repository: armbian/build
          path: build

      - name: Checkout customizations
        uses: actions/checkout@v4
        with:
          path: custom

      - name: Set ARMBIAN_VERSION
        run: |
          cat os/stable.json | jq -r '.version' > $GITHUB_ENV
          if [[ -n "${{ github.event.inputs.armbian_version }}" ]]; then
            echo "ARMBIAN_VERSION=${{ github.event.inputs.armbian_version }}" >> $GITHUB_ENV
          fi

      - name: Copy userpatches and custom
        run: |
          mkdir -p build/userpatches
          rsync -av os/userpatches/. build/userpatches/
          [[ -d custom/userpatches ]] && rsync -av custom/userpatches/. build/userpatches/

      - name: Build Armbian
        run: |
          cd build
          git checkout ${{ github.event.inputs.armbian_branch }}

          if [[ "${{ github.event.inputs.armbian_ui }}" == minimal ]]; then
            BUILD_DESKTOP="no"
            BUILD_MINIMAL="yes"
          elif [[ "${{ github.event.inputs.armbian_ui }}" == server ]]; then
            BUILD_DESKTOP="no"
            BUILD_MINIMAL="no"
          else
            BUILD_DESKTOP="yes"
            BUILD_MINIMAL="no"
            DESKTOP_ENVIRONMENT="${{ github.event.inputs.armbian_ui }}"
            DESKTOP_APPGROUPS_SELECTED=""
            DESKTOP_ENVIRONMENT_CONFIG_NAME="config_base"
          fi

          ./compile.sh "${{ github.event.inputs.armbian_target }}" \
            REVISION="${{ env.ARMBIAN_VERSION }}" \
            BOARD="${{ github.event.inputs.armbian_board }}" \
            BRANCH="${{ github.event.inputs.armbian_kernel_branch }}" \
            RELEASE="${{ github.event.inputs.armbian_release }}" \
            KERNEL_CONFIGURE="no" \
            BUILD_DESKTOP="${BUILD_DESKTOP}" \
            BUILD_MINIMAL="${BUILD_MINIMAL}" \
            DESKTOP_ENVIRONMENT="${DESKTOP_ENVIRONMENT}" \
            DESKTOP_APPGROUPS_SELECTED="${DESKTOP_APPGROUPS_SELECTED}" \
            DESKTOP_ENVIRONMENT_CONFIG_NAME="${DESKTOP_ENVIRONMENT_CONFIG_NAME}" \
            ENABLE_EXTENSIONS="${{ github.event.inputs.armbian_extensions }}" \
            COMPRESS_OUTPUTIMAGE="${{ github.event.inputs.armbian_compress }}" \
            SHARE_LOG="yes" \
            EXPERT="yes"

      - name: Sign artifacts
        if: ${{ github.event.inputs.armbian_pgp_key != '' }}
        run: |
          echo "${{ secrets.ARM_PGP_PASSWORD }}" | \
          gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes \
          build/output/images/*.img*.xz

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: "${{ env.ARMBIAN_VERSION }}"
          name: "${{ github.event.inputs.armbian_release_title }}"
          artifacts: "${{ github.event.inputs.armbian_artifacts }}*"
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          makeLatest: true
          token: "${{ secrets.GITHUB_TOKEN }}"
          body: |
            ${{ github.event.inputs.armbian_release_body }}
